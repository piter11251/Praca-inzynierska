// <auto-generated />
using System;
using DiabetesApp.DiabetesAppDbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DiabetesApp.Migrations
{
    [DbContext(typeof(DiabetesDbContext))]
    [Migration("20241202221405_BloodPressure")]
    partial class BloodPressure
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DiabetesApp.Entities.BloodPressure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DiastolicPressure")
                        .HasColumnType("int");

                    b.Property<bool?>("IsIrregularPulse")
                        .HasColumnType("bit");

                    b.Property<DateTime>("MeasureDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Pulse")
                        .HasColumnType("int");

                    b.Property<int>("StolicPressure")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Pressures");
                });

            modelBuilder.Entity("DiabetesApp.Entities.Entry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MealMarker")
                        .HasColumnType("int");

                    b.Property<DateTime>("MealTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("MealType")
                        .HasColumnType("int");

                    b.Property<int>("SugarValue")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Entries");
                });

            modelBuilder.Entity("DiabetesApp.Entities.PreferableSugarLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MaxValue")
                        .HasColumnType("int");

                    b.Property<int>("MealMarker")
                        .HasColumnType("int");

                    b.Property<int>("MinValue")
                        .HasColumnType("int");

                    b.Property<int>("UserPreferencesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserPreferencesId");

                    b.ToTable("PreferableSugarLevel");
                });

            modelBuilder.Entity("DiabetesApp.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DiabetesType")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DiabetesApp.Entities.UserPreferences", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserPreferences");
                });

            modelBuilder.Entity("DiabetesApp.Entities.BloodPressure", b =>
                {
                    b.HasOne("DiabetesApp.Entities.User", null)
                        .WithMany("Pressures")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("DiabetesApp.Entities.Entry", b =>
                {
                    b.HasOne("DiabetesApp.Entities.User", null)
                        .WithMany("Entries")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("DiabetesApp.Entities.PreferableSugarLevel", b =>
                {
                    b.HasOne("DiabetesApp.Entities.UserPreferences", "UserPrefences")
                        .WithMany("PreferableSugarLevels")
                        .HasForeignKey("UserPreferencesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserPrefences");
                });

            modelBuilder.Entity("DiabetesApp.Entities.UserPreferences", b =>
                {
                    b.HasOne("DiabetesApp.Entities.User", "User")
                        .WithOne("UserPreferences")
                        .HasForeignKey("DiabetesApp.Entities.UserPreferences", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DiabetesApp.Entities.User", b =>
                {
                    b.Navigation("Entries");

                    b.Navigation("Pressures");

                    b.Navigation("UserPreferences")
                        .IsRequired();
                });

            modelBuilder.Entity("DiabetesApp.Entities.UserPreferences", b =>
                {
                    b.Navigation("PreferableSugarLevels");
                });
#pragma warning restore 612, 618
        }
    }
}
